=================
リテラルと変数
=================

IPython シェルを起動してください ::

   $ ipython


リテラル表記
================

これからたくさんの文字(列)や数字や, もっと複雑な構造を持った対象 (オブジェクト) を操作することになります. すべてのオブジェクトは「型」と呼
ばれる情報を持っていて, そのオブジェクトに対して許される操作が決まっています.

基本的なオブジェクトには「リテラル」と呼ばれる表記法があり, 簡便な記法によってオブジェクトを作ることができます. 文字列のリテラル, 整数の
リテラル, 小数のリテラル, 複素数のリテラルなどがこのテキストで使う中でもっとも基本的なものです.

文字(列)を引用符 (``" ... "`` or ``' ... '``)で囲んだものが文字列リテラルです. 引用符の中に引用符を入れたい場合は, 種類の異なる引用符を
使って囲みます.

.. ipython::

   In [1]: 'This is a string literal.'
   Out[1]: 'This is a string literal.'

   In [2]: "This is also a string literal."
   Out[2]: 'This is also a string literal.'

   In [3]: "This is a 'nested' quatation mark."
   Out[3]: "This is a 'nested' quatation mark."

数字 (整数, 小数, 複素数) のリテラルは自明なものです. 虚数部分を ``1j``, ``2j`` のように書くことに注意してください. ``1j`` の代わりに
``j``とすることはできません.

.. ipython::

   In [4]: 10
   Out[4]: 10

   In [5]: -10
   Out[5]: -10

   In [6]: 10 * 2
   Out[6]: 20

   In [7]: 1.2
   Out[7]: 1.2

   In [8]: 10+1j
   Out[8]: (10+1j)


上で挙げた表記は特定の型のオブジェクトを生成しています. ``type()`` 関数を使って確認しておきましょう.

.. ipython::

   In [9]: type("This is another string")
   Out[9]: str

   In [10]: type(10)
   Out[10]: int

   In [11]: type(1.1)
   Out[11]: float

   In [12]: type(1-1j)
   Out[12]: complex

このように, ある特定の型のオブジェクトを生成するための簡便な表記法を**リテラル**と呼びます. 他の型でもこのような表記法を利用できるものが
あります. `組み込み型 <>` のセクションで解説します.


変数
==========

Python における変数は「特定のオブジェクトに対するラベル」のことです. 例えば,

.. ipython::

   In [14]: x = 10

と書けば, ``10`` という整数型のオブジェクトが生成され, そのオブジェクトに対して ``x`` というラベルを付けることになります.::

   [変数名] = [オブジェクト]

によって, [オブジェクト] を [変数名] で呼び出すことができるようになります. 変数はオブジェクトに対する **参照** であるとも言われます.

上のような操作を **代入** という風にいうこともあります. なんと呼ぼうと自由ではあるのですが, 「変数 ``x`` に ``10`` という数字を代入する」
という考え方では思わぬ間違いにつながることもありますので注意が必要です. これについては組み込み型のひとつである `リスト <>` を解説する際に
説明します.

変数が参照しているオブジェクトがどんなものかを調べるためには,

.. ipython::

   In [15]: print(x)
   10

とするか, もっと簡単に,

.. ipython::

   In [16]: x
   Out[16]: 10

とします. インタラクティブシェルで変数名を呼び出すと, そのオブジェクトの文字列表現が画面に出力されます.

変数はいつでも参照先を変更することができます. Python では実行中に変数の型が変わってもかまいません. このような性質を **動的型付け**
(Dynamic Typing) と呼びます. 変数を作るときに型を決める必要がある言語仕様を **静的型付け** (Static Typing) といいます. 動的型付け
言語では, 次のような操作が許されます.

.. ipython::

   In [26]: y = "This is a string"

   In [27]: type(y)
   Out[27]: str

   In [28]: y = 1

   In [29]: type(y)
   Out[29]: int

   In [30]: y = 1.2

   In [31]: type(y)
   Out[31]: float

Python のように参照先の型を変えられるという性質にはデメリットもあります. コードが期待している型と, 実際に入力された型が異なる場合には
もちろんコードは正しく動きません. このような場合に静的型付け言語では実行する前にエラーになりますが, 動的型付け言語では実行してみないとエラー
であると判定されません. ひょっとすると実行しても結果を見るまでエラーとは分からないかもしれません.

動的型付けの自由度の高さを活かすためには, 注意深くコーディングする必要があります.

なお, 複数の変数を同時に代入することができます.

.. ipython::

   In [23]: a, b, c = 1, -0.5, 1 - 0.5j

   In [24]: a
   Out[24]: 1

   In [25]: b
   Out[25]: -0.5

   In [26]: c
   Out[26]: (1-0.5j)